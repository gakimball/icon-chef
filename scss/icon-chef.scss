%icon-chef-icon {
  position: relative;
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;

  &::after {
    content: '';
    position: absolute;
    display: block;
    width: 100%;
  }
}

/**
 * Creates a menu icon with a set width, height, number of bars, and colors.
 * The mixin uses the height of the icon and the weight of the bars to determine spacing.
 * If a set of toppings is passed in, the mixin ignores the set colors and bar count.
 *
 * @author Geoff Kimball
 *
 * @param {number} $width - Width of the icon.
 * @param {number} $height - Height of the icon.
 * @param {number} $weight - Height of individual bars in the icon.
 * @param {number} $bars - Number of bars in the icon.
 * @param {list | null} $toppings - A list of toppings to use in the middle of the icon.
 * @param {color} $bgColor - Color to use for the icon.
 * @param {color} $hoverBg - Color to use when the icon is hovered over.
 */
@mixin icon-chef(
  $width: 30px,
  $height: 23px,
  $weight: 4px,
  $bars: 3,
  $toppings: false,
  $bgColor: black,
  $hoverBg: false
) {

  /*
    Local variables
  */

  // box-shadow CSS output
  $shadow: ();
  $hoverShadow: ();

  // Colors to use for each bar
  $colors: ();
  $hoverColors: ();

  // Amount to lighten for hover state
  $lighten-amount: 20%;

  // Detect user settings
  $hasHover: $bgColor != $hoverBg;
  $hasToppings: $toppings != false;

  /*
    Bars and spacing
  */

  // If the user specified toppings, two extra bars for bread are added automatically
  @if $hasToppings {
    $bars: 2 + length($toppings);
  }

  // Spacing between bars is calculated based on the total height of the icon and the weight of each bar
  $spacing: floor(($height - ($weight * $bars)) / ($bars - 1));

  /*
    Coloring
  */

  // Topping colors
  $toppingColors: (
    bread: #bb9b4b,
    meat: #86622a,
    cheese: #e1c640,
    lettuce: #39dd34,
    tomato: #dd6060,
    onion: #dd81a6,
    pickles: #659e61,
  );

  // If not using toppings, all bars have the same color
  @if not $hasToppings {
    @for $i from 1 through $bars {
      $colors: append($colors, $bgColor);
    }
  }
  // If using toppings, we craft a special series of color bars, fresh, never frozen
  @else {
    // Top bun
    $colors: append($colors, map-get($toppingColors, bread));

    // Toppings
    @each $topping in $toppings {
      $colors: append($colors, map-get($toppingColors, $topping));
    }

    // Bottom bun
    $colors: append($colors, map-get($toppingColors, bread));
  }

  /*
    Hover state
  */

  // Icon container
  @extend %icon-chef-icon;
  width: $width;
  height: $height;

  // Icon bars
  &::after {
    height: $weight;
    background: nth($colors, 1);

    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $shadow: append($shadow, 0 $offset 0 nth($colors, $i), comma);
    }

    -webkit-box-shadow: $shadow;
       -moz-box-shadow: $shadow;
            box-shadow: $shadow;
  }

  /*
    Hover state
  */
  @if $hasHover {
    // If using hover variables: just use those
    @if not $hasToppings {
      // If the user didn't specify a hover color, make one
      $hoverBg: if($hoverBg == false, scale-color($bgColor, $lightness: $lighten-amount), $hoverBg);

      @each $color in $colors {
        $hoverColors: append($hoverColors, $hoverBg);
      }
    }
    // If using toppings: lighten each color
    @else {
      @each $color in $colors {
        $newColor: scale-color($color, $lightness: $lighten-amount);
        $hoverColors: append($hoverColors, $newColor);
      }
    }
    // Generate CSS
    @each $bar in $shadow {
      @for $i from 2 through $bars {
        $offset: ($weight + $spacing) * ($i - 1);
        $hoverShadow: append($hoverShadow, 0 $offset 0 nth($hoverColors, $i), comma);
      }
    }

    &:hover::after {
      background: nth($hoverColors, 1);
      -webkit-box-shadow: $hoverShadow;
         -moz-box-shadow: $hoverShadow;
              box-shadow: $hoverShadow;
    }
  }
}

@import "recipies";
